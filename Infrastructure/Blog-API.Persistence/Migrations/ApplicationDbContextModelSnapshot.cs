// <auto-generated />
using System;
using Blog_API.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blog_API.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleArticleImageFile", b =>
                {
                    b.Property<double>("ArticleImageFilesId")
                        .HasColumnType("double precision");

                    b.Property<double>("ArticlesId")
                        .HasColumnType("double precision");

                    b.HasKey("ArticleImageFilesId", "ArticlesId");

                    b.HasIndex("ArticlesId");

                    b.ToTable("ArticleArticleImageFile");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Article", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Comment", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<double>("ArticleId")
                        .HasColumnType("double precision");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.File", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasDiscriminator<string>("Discriminator").HasValue("File");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Tag", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("double precision");

                    b.Property<double>("ArticleId")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.ArticleImageFile", b =>
                {
                    b.HasBaseType("Blog_API.Domain.Entities.File");

                    b.Property<bool>("Showcase")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("ArticleImageFile");
                });

            modelBuilder.Entity("ArticleArticleImageFile", b =>
                {
                    b.HasOne("Blog_API.Domain.Entities.ArticleImageFile", null)
                        .WithMany()
                        .HasForeignKey("ArticleImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog_API.Domain.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Blog_API.Domain.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Blog_API.Domain.Entities.Article", "Article")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Blog_API.Domain.Entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
